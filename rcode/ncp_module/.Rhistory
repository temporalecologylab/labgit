iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 18
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 5  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 0.5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 18
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 5  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 0.5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
install.packages(c("dplyr", "tidyr", "rstan", "rstanarm", "lubridate", "brms", "shiny", "shinystan"))
install.packages("rstan")
install.packages("rstan")
install.packages(c("StanHeaders","rstan"),type="source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
install.packages("remotes")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
install.packages("rstan", type = "source")
install.packages("rstan", type = "source")
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_compiler(debug = TRUE)
packageVersion("StanHeaders")
install.packages("StanHeaders", type = "source")
pkgbuild::has_compiler(debug = TRUE)
pkgbuild::has_compiler(debug = TRUE)
pkgbuild::has_compiler(debug = TRUE)
pkgbuild::has_compiler(debug = TRUE)
-v
Sys.which("clang++")
install.packages("rstan")
install.packages(c("RColorBrewer", "viridis", "lme4", "ggplot2", "gridExtra", "shiny"))
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 18
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 5  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 0.5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
install.packages("rstan")
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 18
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 5  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 0.5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
options(mc.cores = 4)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
library(shinystan)
launchshinystan
provmethod_fake
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 10
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 15  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 10
ninds <- 100
nobs <- nspps*ninds
### These are our response variables
y_dist <- 300  ### mu_a_sp in model output
y_dist_speciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### Incorporate Predictors
can_effect <- 20  ## Canadian effect, this is saying that if sites are from 1 degree north, they travel 20 fewer kms
can_sd <- 5 ## Canadian effect sd
distspp <- round(rnorm(nspps, y_dist, y_dist_speciessd), digits=0)
df.dist <- as.data.frame(cbind(species=rep(1:nspps, each=ninds), ind=rep(1:ninds),
distspp=rep(distspp, each=ninds)))
df.dist$canadian <- rbinom(nobs, 1, 0.5)
df.dist$dist.can <- df.dist$canadian * rep(rnorm(n=nspps, mean=can_effect, sd=can_sd), each=ninds)
View(df.dist)
#  1) Let's make the observations much higher than the actual data to build a good model.
nsp = 10 # number of species
ntot = 100 # numbers of obs per species.
sample_a <- list(can.env = rbinom(1000, 1, 0.5),
herb.env = rbinom(1000, 1, 0.5))
model.parameters <- list(intercept = 300,
can.coef = 50,
herb.coef = -20,
canxherb = 5)
#  2) Now, we will make varying intercepts
env.samples <- sapply(sample_a, FUN = function(x){
sample(x, size = nsp * ntot, replace = TRUE)})
# Determine which environmental variables interact
intrxnname <- names(model.parameters)[4] # interaction terms
names.temp <- gsub("x", "|", intrxnname) # remove text to align with colnames
env.pairs <- sapply(1:length(names.temp), FUN = function(X){
grep(pattern = names.temp[X], x = colnames(env.samples))
})
# Add these interactions (product) to env.samples
env.interactions <- sapply(1:ncol(env.pairs), FUN = function(X){
apply(env.samples[, env.pairs[, X]], MARGIN = 1, FUN = prod)
})
env.samples2 <- cbind(env.samples, env.interactions)
# Create model matrix
mm <- model.matrix(~env.samples2)
#  4) We need to make a random intercept model for each species
parameters.temp <- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nsp * ntot, byrow = TRUE)
# Which parameters are random?
random.regex <- grep(pattern = paste(c("intercept", "can.coef", "herb.coef", "canxherb"), collapse = "|"), x = names(model.parameters))
# Generate random parameters (by species)
parameters.temp[, 1] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[1]]], sd = 10), ntot)})
parameters.temp[, 2] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[2]]], sd = 10), ntot)})
parameters.temp[, 3] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[3]]], sd = 5), ntot)})
parameters.temp[, 4] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[4]]], sd = 2), ntot)})
# Calculate response
response <- sapply(1:nrow(env.samples), FUN = function(x){
rnorm(n = 1, mean = mm[x, ] %*% parameters.temp[x, ], sd = 2)})
distall <- cbind(data.frame(species = as.vector(sapply(1:nsp, FUN = function(x) rep(x, ntot))),
gdd = response, provenance = env.samples[,1], method = env.samples[,2]))
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(gdd ~ provenance + method + provenance*method + (provenance + method + provenance*method|species), data=testdata_provmethod_intrxn) ## Quick look looks good!
install.packages("lme4")
library(lme4)
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(gdd ~ provenance + method + provenance*method + (provenance + method + provenance*method|species), data=testdata_provmethod_intrxn) ## Quick look looks good!
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(gdd ~ provenance + method + provenance*method + (provenance + method + provenance*method|species), data=distall) ## Quick look looks good!
modtest
View(distall)
distall <- cbind(data.frame(species = as.vector(sapply(1:nsp, FUN = function(x) rep(x, ntot))),
distance = response, canadian = env.samples[,1], herbivore = env.samples[,2]))
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(distance ~ canadian + herbivore + canadian*herbivore + (canadian + herivore + canadian*herbivore|species), data=testdata_provmethod_intrxn) ## Quick look looks good!
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(distance ~ canadian + herbivore + canadian*herbivore + (canadian + herivore + canadian*herbivore|species), data=distall) ## Quick look looks good!
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(distance ~ canadian + herbivore + canadian*herbivore + (canadian + herbivore + canadian*herbivore|species), data=distall) ## Quick look looks good!
brmtest <- brm(distance ~ canadian + (canadian|species), data=distall)
## Check Stan speed on new comp
library(brms)
brmtest <- brm(distance ~ canadian + (canadian|species), data=distall)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
# Load Libraries
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
# Set Working directory
setwd("~/Documents/git/bayes2020/Projects/Cat/ncp_learning/")
source("simdata.R")
